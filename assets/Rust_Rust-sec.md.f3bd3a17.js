import{_ as a,o as l,c as s,O as o}from"./chunks/framework.83fefa50.js";const g=JSON.parse('{"title":"Rust","description":"","frontmatter":{"title":"Rust","editLink":true},"headers":[],"relativePath":"Rust/Rust-sec.md"}'),n={name:"Rust/Rust-sec.md"},p=o(`<h1 id="本篇为rust学习详细章节" tabindex="-1">本篇为<a href="https://www.rust-lang.org/zh-CN/" target="_blank" rel="noreferrer">Rust</a>学习详细章节 <a class="header-anchor" href="#本篇为rust学习详细章节" aria-label="Permalink to &quot;本篇为[Rust](https://www.rust-lang.org/zh-CN/)学习详细章节&quot;">​</a></h1><h2 id="为什么使用rust" tabindex="-1">为什么使用Rust？ <a class="header-anchor" href="#为什么使用rust" aria-label="Permalink to &quot;为什么使用Rust？&quot;">​</a></h2><ul><li><p>Rust是一种令人兴奋的新编程语言，可以让每个人编写可靠且高效。</p></li><li><p>可以用来替代C/C++，Rust和它们具有相同的性能，但是很多常见的bug在编译时就可以被消灭。</p></li><li><p>Rust是一种通用的编程语言，但是它更善于以下场景：</p><p>--<strong>需要运行时的速度</strong></p><p>--<strong>需要内存安全</strong></p><p>--<strong>更好的利用多处理器</strong></p></li></ul><h2 id="与其他语言比较" tabindex="-1">与其他语言比较 <a class="header-anchor" href="#与其他语言比较" aria-label="Permalink to &quot;与其他语言比较&quot;">​</a></h2><ul><li><p>C/C++性能非常好，但类型系统和内存都不太安全。</p></li><li><p>Java/C#，拥有<a href="https://blog.csdn.net/u013201439/article/details/80300047" target="_blank" rel="noreferrer">GC</a>，能保证内存安全，也有很多优秀特性，但是性能不行。</p></li><li><p>Rust：</p><p>--<strong>安全</strong></p><p>--<strong>无需GC</strong></p><p>--<strong>易于维护、调试，代码安全高效</strong></p></li></ul><h2 id="rust特别擅长的领域" tabindex="-1">Rust特别擅长的领域 <a class="header-anchor" href="#rust特别擅长的领域" aria-label="Permalink to &quot;Rust特别擅长的领域&quot;">​</a></h2><ul><li>高性能 Web Service</li><li>WebAssembly</li><li>命令行工具</li><li>网络编程</li><li>嵌入式设备</li><li>系统编程</li></ul><h2 id="rust用户和案例" tabindex="-1">Rust用户和案例 <a class="header-anchor" href="#rust用户和案例" aria-label="Permalink to &quot;Rust用户和案例&quot;">​</a></h2><ul><li>Google：新操作系统Fuschia，其中Rust代码量大约占30%</li><li>Amazon：基于Linux开发的直接可以在裸机、虚拟机上运行容器的操作系统</li><li>System76：纯Rust开发了下一代安全操作系统Redox</li><li>蚂蚁金服：库操作系统Occlum</li><li>斯坦福和密歇根大学：嵌入式实时操作系统，应用于Google的加密产品</li><li>微软：正在使用Rust重写Windows系统中的一些低级组件</li><li>微软：WinRT/Rust项目</li><li>Dropbox、Yelp、Coursera、LINE、Cloudflare、Aflassian、npm、Ceph、百度、华为、Sentry、Deno...</li></ul><h2 id="一个简单的rust程序" tabindex="-1">一个简单的Rust程序 <a class="header-anchor" href="#一个简单的rust程序" aria-label="Permalink to &quot;一个简单的Rust程序&quot;">​</a></h2><ul><li>程序文件后缀名：rs</li><li>例子：hello_world.rs:</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">println!(&quot;Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">);</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span></code></pre></div><h2 id="编译与运行rust程序" tabindex="-1">编译与运行Rust程序 <a class="header-anchor" href="#编译与运行rust程序" aria-label="Permalink to &quot;编译与运行Rust程序&quot;">​</a></h2><ul><li><p>编译：rustc main.rs</p></li><li><p>运行：</p><p>-Windows：.\\main.rs</p><p>-Linux/mac：./main</p></li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">PS</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\c</span><span style="color:#C3E88D;">ode</span><span style="color:#A6ACCD;">\\R</span><span style="color:#C3E88D;">ust</span><span style="color:#A6ACCD;">\\h</span><span style="color:#C3E88D;">ello_worl</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rustc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello_world.rs</span></span>
<span class="line"><span style="color:#FFCB6B;">PS</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\c</span><span style="color:#C3E88D;">ode</span><span style="color:#A6ACCD;">\\R</span><span style="color:#C3E88D;">ust</span><span style="color:#A6ACCD;">\\h</span><span style="color:#C3E88D;">ello_worl</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">\\h</span><span style="color:#C3E88D;">ello_world.exe</span></span>
<span class="line"><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">World</span></span></code></pre></div><h3 id="编译和运行是单独的两步" tabindex="-1">编译和运行是单独的两步 <a class="header-anchor" href="#编译和运行是单独的两步" aria-label="Permalink to &quot;编译和运行是单独的两步&quot;">​</a></h3><ul><li><p>运行Rust程序之前必须先编译，命令为：rustc 源文件名</p></li><li><p>编译成功后，会生成一个二进制文件</p><p>-在Windows上还会生成一个.pdb文件，里面包含调试信息</p></li><li><p>Rust是ahead-of-time编译的语言</p><p>-可以先编译程序，然后把可执行文件交给别人运行（无需安装Rust）</p></li><li><p>rustc只适合简单的Rust程序...</p></li></ul><h2 id="rust程序解剖" tabindex="-1">Rust程序解剖 <a class="header-anchor" href="#rust程序解剖" aria-label="Permalink to &quot;Rust程序解剖&quot;">​</a></h2><ul><li><p>定义函数：fn main(){}</p><p>-没有参数，没有返回</p></li><li><p>main函数很特别：它是每个Rust可执行程序最先运行的代码</p></li><li><p>打印文本：println!(&quot;Hello World!&quot;);</p><p>-Rust的缩进是<strong>4个空格</strong>而不是tab</p><p>-println！是一个Rust macro（宏）*如果是函数的话，就没有！</p></li><li><p>&quot;Hello World&quot;是字符串，它是println！的参数</p></li><li><p>这行代码以;结尾</p></li></ul><h2 id="cargo" tabindex="-1">Cargo <a class="header-anchor" href="#cargo" aria-label="Permalink to &quot;Cargo&quot;">​</a></h2><ul><li><p>Cargo是Rust的构建系统和包管理工具</p><p>-构建代码、下载依赖的库、构建这些库...</p></li><li><p>安装Rust时会自动安装Cargo</p><p>-可以使用cargo --version查看</p></li></ul><h2 id="使用cargo创建项目" tabindex="-1">使用Cargo创建项目 <a class="header-anchor" href="#使用cargo创建项目" aria-label="Permalink to &quot;使用Cargo创建项目&quot;">​</a></h2><ul><li><p>创建项目：cargo new hello_cargo</p><p>-项目名称也是hello_cargo</p><p>-会创建一个新的目录hello_cargo</p><ul><li><p>Cargo.toml</p></li><li><p>src目录</p><ul><li>main.rs</li></ul></li><li><p>初始化了一个新的Git仓库， .gitignore</p><ul><li>可以使用其他的VCS或不使用VCS：cargo new 的时候使用 --vcs这个flag</li></ul></li></ul></li></ul><h3 id="cargo-toml" tabindex="-1">Cargo.toml <a class="header-anchor" href="#cargo-toml" aria-label="Permalink to &quot;Cargo.toml&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">package</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello_cargo</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">version</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.1.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">authors</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">edition</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2021</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">]</span></span></code></pre></div><ul><li><p>TOML(Tom&#39;s Obvious,Minimal Language)格式，是Cargo的配置格式</p></li><li><p>[package]，是一个区域标题，表示下方内容是用来配置包（package）的</p><p>-name，项目名</p><p>-version，项目版本</p><p>-authors，项目作者</p><p>-edition，使用的Rust版本</p></li><li><p>[dependencies]，另一个区域的开始，它会列出项目的依赖项。</p></li><li><p>在Rust里面，代码的包称作crate。</p></li></ul><h3 id="src-main-rs" tabindex="-1">src/main.rs <a class="header-anchor" href="#src-main-rs" aria-label="Permalink to &quot;src/main.rs&quot;">​</a></h3><ul><li><p>cargo生成的main.rs在src目录下</p></li><li><p>而Cargo.toml在项目顶层下</p></li><li><p>源代码都应该在src目录下</p></li><li><p>顶层目录可以放置：README、许可信息、配置文件和其他与程序源码无关的文件</p></li><li><p>如果创建项目时没有使用cargo，也可以把项目转化为使用cargo：</p><p>-把源代码文件移动到src下</p><p>-创建Cargo.toml并填写相应的配置</p></li></ul><h2 id="构建cargo项目-cargo-build" tabindex="-1">构建Cargo项目，cargo build <a class="header-anchor" href="#构建cargo项目-cargo-build" aria-label="Permalink to &quot;构建Cargo项目，cargo build&quot;">​</a></h2><ul><li>cargo build</li></ul><p>-创建可执行文件：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Linux系统</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:target/debug/hello_cargo</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Windows系统</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:target\\debug\\hello_cargo.exe</span></span></code></pre></div><p>-运行可执行文件：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Linux系统</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:./target/debug/hello_cargo</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Windows系统</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:.\\target\\debug\\hello_cargo.exe</span></span></code></pre></div><ul><li><p>第一次运行cargo build会在顶层目录生成cargo.lock文件</p><p>-该文件负责追踪项目依赖的精确版本</p><p>-不需要手动修改该文件</p></li></ul><h2 id="构建并运行cargo项目-cargo-run" tabindex="-1">构建并运行cargo项目，cargo run <a class="header-anchor" href="#构建并运行cargo项目-cargo-run" aria-label="Permalink to &quot;构建并运行cargo项目，cargo run&quot;">​</a></h2><ul><li><p>cargo run，编译代码+执行结果</p><p>-如果之前编译成功过，并且源码没有改变，那么就会直接运行二进制文件</p></li></ul><h2 id="cargo-check" tabindex="-1">cargo check <a class="header-anchor" href="#cargo-check" aria-label="Permalink to &quot;cargo check&quot;">​</a></h2><ul><li><p>cargo check，检查代码，确保能通过编译，但是不产生任何可执行文件</p></li><li><p>cargo check 要比cargo build 快得多</p><p>-编写代码的时候可以连续反复的使用cargo check检查代码，提高效率</p></li></ul><h2 id="为发布构建" tabindex="-1">为发布构建 <a class="header-anchor" href="#为发布构建" aria-label="Permalink to &quot;为发布构建&quot;">​</a></h2><ul><li><p>cargo build --release</p><p>编译时会进行优化</p><ul><li>代码会运行的更快，但是编译时间更长</li></ul><p>-会在target/release而不是target/debug生成可执行文件</p></li><li><p>两种配置：</p><p>-一个开发</p><p>-一个正式发布</p></li></ul>`,41),e=[p];function t(r,i,c,u,h,C){return l(),s("div",null,e)}const D=a(n,[["render",t]]);export{g as __pageData,D as default};
